# acceleration for power in modular arithmetic

import numpy
import sympy

a=27
b=39
c=a+b

# mode Hint On: why give out free apples when they weren't such apples to me? example of deuces. can you simplify it?

for x in range(c):
    print((x**sympy.totient(a)-x**(sympy.totient(c)+(sympy.totient(a) % sympy.totient(c)))+x**sympy.totient(b)-x**(sympy.totient(c)+(sympy.totient(b) % sympy.totient(c)))) % c)

# time test:

a=999999
b=1
c=a+b

x=9876

# edit: why requototient the cyclic group? one-to-"small"-many presumption for the non-necessity of redundant recalculii

t = sympy.totient(c)

t0 = time.time()

for i in range(10):
    print((x**(t+(a % t))+x**(t+(b % t))) % c)

t1 = time.time()

print(t1-t0)

# 0.0219075679779052

t0 = time.time()

for i in range(10):
    print((x**a+x**b) % c)

t1 = time.time()

print(t1-t0)

# 17.70223736763

# 800+x speedup yay! this is a conservative test for what it is but it's not "representative" (the latter requires asymptotic analysis thx it presumably diverges empirically)

# btw, does AbstractionBasis#1(class(O(1)))=AbstractionBasis#2(class(O(1))) for all abstractions over primitive operations? unknot really

# wherefore art thou modulo?
